#!/usr/bin/env ruby

require 'logger'
require 'optparse'
require 'ostruct'
require 'tmpdir'

class Copier

  attr_accessor :git_repository, :git_position, :git_source_directory, :add_directory
  attr_accessor :destination, :rsync_delete

  
  def initialize(logger: nil)
    @logger = logger
  end

  def normalize_file_name(name)
    s = File::SEPARATOR
    name.sub(/(?<=\A#{s}|[^#{s}])#{s}+\z/, '')
  end

  def directory_name_with_slash(name)
    dir_name = name
    if dir_name.length == 0
      raise "Directory name can't be empty"
    end
    if dir_name[-1] != File::SEPARATOR &&
       !(File::ALT_SEPARATOR && dir_name[-1] == File::ALT_SEPARATOR)
      dir_name += File::SEPARATOR
    end
    return dir_name
  end
  
  def copy()
    Dir.mktmpdir do |tmp_dir_name|
      @logger.debug("Temporary directory: #{tmp_dir_name}") if @logger
      archive_file_name = tmp_dir_name + File::SEPARATOR + 'archive.tar'
      work_copy_dir_name = tmp_dir_name + File::SEPARATOR + 'work_copy'
      Dir.mkdir(work_copy_dir_name)
      git_archive_with_options =
        ['git', 'archive', '--format=tar', '-o', archive_file_name]
      if @git_repository
        git_archive_with_options << '--remote'
        git_archive_with_options << @git_repository
      end
      git_archive_with_options << @git_position
      git_archive_with_options << @git_source_directory if @git_source_directory
      @logger.debug("Ececute " + git_archive_with_options.join(' ')) if @logger
      system(*git_archive_with_options) || raise("git archive failed.")
      Dir.chdir(work_copy_dir_name) do |path|
        system('tar', 'xf', archive_file_name) || raise("Can't extract archive.")
      end
      if @add_directory
        rsync_with_options_work_dir = ['rsync', '-a']
        rsync_with_options_work_dir << directory_name_with_slash(@add_directory)
        rsync_with_options_work_dir << work_copy_dir_name
        @logger.debug('Execute: ' + rsync_with_options_work_dir.join(' ') + '...') if @logger
        system(*rsync_with_options_work_dir) || raise("Can't run rsync for creating work copy.")
      end
      before_rsync(work_copy_dir_name)
      rsync_with_options_install = ['rsync', '-a']
      rsync_with_options_install << '--delete' if @rsync_delete
      rsync_with_options_install << directory_name_with_slash(work_copy_dir_name)
      rsync_with_options_install << @destination
      @logger.debug('Execute: ' + rsync_with_options_install.join(' ') + '...') if @logger
      system(*rsync_with_options_install) || raise("Can't run rsync for install.")
      after_rsync(work_copy_dir_name)
    end
  end

 def before_rsync(work_dir)
   return true
 end

 def after_rsync(work_dir)
   return true
 end

 private

end


class CommandLineOptionParser

  def self.parse(args)
    options = OpenStruct.new

    options.git_repository = nil
    options.git_position = nil
    options.git_source_directory = nil
    options.add_directory = nil
    options.destination = nil
    options.rsync_delete = false

    option_parser = OptionParser.new do |opts|
      
      opts.banner = "Usage: copy-from-git [options]"

      opts.on('-h', '--help', 'Show this help') do
        puts opts
        exit
      end
      
      opts.on('-rURI', '--git-repository=URL', 'git repository with source') do |git_repository|
        options.git_repository = git_repository
      end

      opts.on('-pPOSITION', '--git-position=POSITION', 'A branch or commit name') do |git_position|
        options.git_position = git_position
      end

      opts.on('-sDIRECTORY', '--source-directory=DIRECTORY', 'Copy content of the subdirectory in the git tree (relative of the root of the repository') do |git_source_directory|
        options.git_source_directory = git_source_directory
      end

      opts.on('-aDIRECTORY', '--add-content=DIRECTORY', 'Add the content of the directory to the result tree') do |add_directory|
        options.add_directory = add_directory
      end

      opts.on('-dDESTINATION', '--destination=DESTINATION', 'The destination directory/URI for rsync') do |destination|
        options.destination = destination
      end

      opts.on('-D', '--rsync-delete', 'Run rsync with option "--delete" (DANGEROUS! Removes old content from the target directory!)') do |rsync_delete|
        options.rsync_delete = rsync_delete
      end

      opts.on('-v', '--verbose', 'Verbose mode') do |verbose|
        options.verbose = verbose
      end

      opts.on('--debug', 'Debug mode') do |debug|
        options.debug = debug
      end
      
    end

    option_parser.parse!(args)

    if !options.git_position
      puts "Set the branch or commit name with the option --git-position."
      exit
    end

    if !options.destination
      puts "Set the destination for rsync with the option --destination."
      exit
    end    

    return options
  end

end

logger = Logger.new(STDERR)
logger.level = Logger::WARN

options = CommandLineOptionParser.parse(ARGV)

logger.level = Logger::INFO if options.verbose
logger.level = Logger::DEBUG if options.debug

copier = Copier.new(logger: logger)

copier.git_repository = options.git_repository
copier.git_position = options.git_position
copier.git_source_directory = options.git_source_directory
copier.destination = options.destination
copier.add_directory = options.add_directory
copier.rsync_delete =  options.rsync_delete

copier.copy


